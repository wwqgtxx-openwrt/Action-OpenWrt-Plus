#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build Lean's OpenWrt Unstable

on:
  repository_dispatch:
  workflow_dispatch:
  release:
    types: published
  push:
    branches:
      - master
    paths:
      - 'config/lean/x86_64-lean-openwrt.config'
      - 'config/lean/x86-lean-extra.config'
      - '.github/workflows/build-lean-openwrt.yml'
      - 'scripts/lean-openwrt.sh'
  schedule:
    - cron: 0 18 * * *
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: config/lean/x86_64-lean-openwrt.config
  EXTRA_CONFIG_FILE: config/lean/x86-lean-extra.config
  DEVICE: openwrt-x86-64-generic
  DIY_SH: scripts/lean-openwrt.sh
  FEEDS_CONF: feeds.conf.default
  SSH_ACTIONS: false
  KMODS_IN_FIRMWARE: true
  BUILD_EXT4: false
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
#    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf python2.7 python3 wget rsync swig
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Clone Source Code
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update Feeds
      run: |
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
        ./scripts/feeds update -a

    - name: Install Feeds
      run: |
        cd $OPENWRTROOT
        ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
        cat $EXTRA_CONFIG_FILE >> $OPENWRTROOT/.config
        chmod +x scripts/*.sh
        cd $OPENWRTROOT
        ../$DIY_SH
        ../scripts/preset-clash-core.sh amd64
        ../scripts/preset-terminal-tools.sh

    - name: SSH Connection To Actions
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download Package
      id: package
      run: |
        cd $OPENWRTROOT
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            echo "CONFIG_ALL_KMODS=y" >> .config
        fi
        if "$BUILD_EXT4" = 'true'
        then
            echo "CONFIG_TARGET_ROOTFS_EXT4FS=y" >> .config
        fi
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Packages
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(($(nproc) + 1)) || make tools/compile -j1 V=s
        make toolchain/compile -j$(($(nproc) + 1)) || make toolchain/compile -j1 V=s
        make target/compile -j$(($(nproc) + 1)) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(($(nproc) + 1)) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Generate Firmware
      if: steps.compile.outputs.status == 'success'
      id: generate
      run: |
        cd $OPENWRTROOT
        mkdir -p files/etc/opkg
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/snapshots/targets
            cp -r bin/targets/$TARGET files/www/snapshots/targets
            cp ../config/opkg/distfeeds-18.06-local.conf files/etc/opkg/distfeeds.conf
            sed -i "s/subtarget/$SUBTARGET/g" files/etc/opkg/distfeeds.conf
            sed -i "s/target\//$TARGET\//g" files/etc/opkg/distfeeds.conf
            sed -i "s/platform/$PLATFORM/g" files/etc/opkg/distfeeds.conf
        else
            cp ../config/opkg/distfeeds-18.06-remote.conf files/etc/opkg/distfeeds.conf
            sed -i "s/subtarget/$SUBTARGET/g" files/etc/opkg/distfeeds.conf
            sed -i "s/target\//$TARGET\//g" files/etc/opkg/distfeeds.conf
            sed -i "s/platform/$PLATFORM/g" files/etc/opkg/distfeeds.conf
        fi
        if "$IPV6MOD_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/ipv6-modules
            cp bin/packages/$PLATFORM/luci/luci-proto-ipv6* files/www/ipv6-modules
            cp bin/packages/$PLATFORM/base/{ipv6helper*,odhcpd-ipv6only*,odhcp6c*,6in4*} "files/www/ipv6-modules"
            cp bin/targets/$TARGET/$SUBTARGET/packages/{ip6tables*,kmod-nf-nat6*,kmod-ipt-nat6*,kmod-sit*,kmod-ip6tables-extra*} "files/www/ipv6-modules"
            mkdir -p files/bin
            cp ../scripts/ipv6-helper.sh files/bin/ipv6-helper
        fi
        make package/install -j$(($(nproc) + 1)) || make package/install -j1 V=s
        make target/install -j$(($(nproc) + 1)) || make target/install -j1 V=s
        make checksum
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
    - name: Deploy Packages-Server
      if: steps.generate.outputs.status == 'success'
      run: |
        mkdir -p server/web/snapshots/targets/$TARGET/$SUBTARGET
        cp -r $OPENWRTROOT/bin/packages server/web/snapshots
        cp -r $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/packages server/web/snapshots/targets/$TARGET/$SUBTARGET
        mkdir -p $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/pre-packages-server
        cp -r server $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/pre-packages-server
        cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
        zip -q -r packages-server.zip pre-packages-server/server
        
    - name: Upload Config
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: config.buildinfo
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/config.buildinfo

    - name: Upload Images Sha256sums
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: sha256sums
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/sha256sums
        
    - name: Upload Packages-Server
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: packages-server
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/pre-packages-server
        
    - name: Upload Packages Info
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}.manifest
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}.manifest
        
    - name: Upload Kernel Packages
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: kernel-packages
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/packages/
        
    - name: Upload RootFS Archive
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-rootfs${{ env.FILE_DATE }}.tar.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-rootfs.tar.gz

    - name: Upload Generic SquashFS Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-rootfs${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-rootfs.img.gz

    - name: Upload Generic Ext4 Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-ext4-rootfs${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-rootfs.img.gz

    - name: Upload Combined DVD Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.img.gz

    - name: Upload Combined DVD Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-ext4-combined${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-combined.img.gz
        
    - name: Upload Combined PVE/KVM Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined${{ env.FILE_DATE }}.qcow2.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.qcow2.gz
        
    - name: Upload Combined PVE/KVM Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-ext4-combined${{ env.FILE_DATE }}.qcow2.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-combined.qcow2.gz
        
    - name: Upload Combined VirtualBox Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined${{ env.FILE_DATE }}.vdi.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.vdi.gz
        
    - name: Upload Combined VirtualBox Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-ext4-combined${{ env.FILE_DATE }}.vdi.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-combined.vdi.gz
        
    - name: Upload Combined VMware Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined${{ env.FILE_DATE }}.vmdk
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.vmdk
        
    - name: Upload Combined VMware Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-ext4-combined${{ env.FILE_DATE }}.vmdk.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-combined.vmdk.gz
        
    - name: Upload Combined Hyper-V Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined${{ env.FILE_DATE }}.vhdx.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.vhdx.gz
        
    - name: Upload Combined Hyper-V Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-ext4-combined${{ env.FILE_DATE }}.vhdx.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-combined.vhdx.gz

    - name: Upload EFI DVD Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined-efi${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined-efi.img.gz

    - name: Upload EFI DVD Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-ext4-combined-efi${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-combined-efi.img.gz
        
    - name: Upload EFI PVE/KVM Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined-efi${{ env.FILE_DATE }}.qcow2.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined-efi.qcow2.gz
        
    - name: Upload EFI PVE/KVM Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-ext4-combined-efi${{ env.FILE_DATE }}.qcow2.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-combined-efi.qcow2.gz
        
    - name: Upload EFI VirtualBox Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined-efi${{ env.FILE_DATE }}.vdi.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined-efi.vdi.gz
        
    - name: Upload EFI VirtualBox Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-ext4-combined-efi${{ env.FILE_DATE }}.vdi.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-combined-efi.vdi.gz
        
    - name: Upload EFI VMware Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined-efi${{ env.FILE_DATE }}.vmdk
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined-efi.vmdk
        
    - name: Upload EFI VMware Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-ext4-combined-efi${{ env.FILE_DATE }}.vmdk.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-combined-efi.vmdk.gz
        
    - name: Upload EFI Hyper-V Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined-efi${{ env.FILE_DATE }}.vhdx.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined-efi.vhdx.gz
        
    - name: Upload EFI Hyper-V Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-ext4-combined-efi${{ env.FILE_DATE }}.vhdx.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-combined-efi.vhdx.gz


    - name: Organize Files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/$TARGET/$SUBTARGET
        rm -rf packages pre-packages-server
        echo "::set-output name=status::success"

    - name: Upload Firmware Directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: openwrt-firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}