#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build Lean's OpenWrt Stable

on:
  repository_dispatch:
  workflow_dispatch:
  release:
    types: published
  push:
    branches:
      - master
    paths:
      - 'config/lean/x86_64-lean-openwrt-stable.config'
      - '.github/workflows/build-lean-openwrt-stable.yml'
      - 'scripts/lean-openwrt-stable.sh'
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/wwqgtxx-openwrt/openwrt
  REPO_BRANCH: lede-17.01
  CONFIG_FILE: config/lean/x86_64-lean-openwrt-stable.config
  DEVICE: openwrt-x86-64
  DIY_SH: scripts/lean-openwrt-stable.sh
  FEEDS_CONF: feeds.conf.default
  SSH_ACTIONS: false
  IPV6MOD_IN_FIRMWARE: true
  KMODS_IN_FIRMWARE: true
  BUILD_EXT4: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
#    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf python2.7 python3 wget rsync swig
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Clone Source Code
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update Feeds
      run: |
        cd openwrt
        echo "::set-env name=OPENWRTROOT::$PWD"
        ./scripts/feeds update -a

    - name: Install Feeds
      run: |
        cd $OPENWRTROOT
        ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
        cat config/lean/x86-lean-extra-stable.config >> $OPENWRTROOT/.config
        chmod +x scripts/*.sh
        cd $OPENWRTROOT
        ../$DIY_SH
        ../scripts/preset-clash-core.sh amd64
        ../scripts/preset-terminal-tools.sh

    - name: SSH Connection To Actions
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download Package
      id: package
      run: |
        cd $OPENWRTROOT
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            echo "CONFIG_ALL_KMODS=y" >> .config
        fi
        if "$BUILD_EXT4" = 'true'
        then
            echo "CONFIG_TARGET_ROOTFS_EXT4FS=y" >> .config
        fi
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Packages
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Generate Firmware
      if: steps.compile.outputs.status == 'success'
      id: generate
      run: |
        cd $OPENWRTROOT
        mkdir -p files/etc/opkg
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/snapshots/targets
            cp -r bin/targets/$TARGET files/www/snapshots/targets
            cp ../config/opkg/distfeeds-19.07-local.conf files/etc/opkg/distfeeds.conf
            sed -i "s/subtarget/$SUBTARGET/g" files/etc/opkg/distfeeds.conf
            sed -i "s/target\//$TARGET\//g" files/etc/opkg/distfeeds.conf
            sed -i "s/platform/$PLATFORM/g" files/etc/opkg/distfeeds.conf
        else
            cp ../config/opkg/distfeeds-19.07-remote.conf files/etc/opkg/distfeeds.conf
            sed -i "s/subtarget/$SUBTARGET/g" files/etc/opkg/distfeeds.conf
            sed -i "s/target\//$TARGET\//g" files/etc/opkg/distfeeds.conf
            sed -i "s/platform/$PLATFORM/g" files/etc/opkg/distfeeds.conf
        fi
        if "$IPV6MOD_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/ipv6-modules
            cp bin/packages/$PLATFORM/luci/luci-proto-ipv6* files/www/ipv6-modules
            cp bin/packages/$PLATFORM/base/{ipv6helper*,odhcpd-ipv6only*,odhcp6c*,6in4*} "files/www/ipv6-modules"
            cp bin/targets/$TARGET/$SUBTARGET/packages/{ip6tables*,kmod-nf-nat6*,kmod-ipt-nat6*,kmod-sit*,kmod-ip6tables-extra*} "files/www/ipv6-modules"
            mkdir -p files/bin
            cp ../scripts/ipv6-helper.sh files/bin/ipv6-helper
        fi
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        make checksum
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"
        echo "::set-output name=status::success"
        
    - name: Upload Bin Directory
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: openwrt-bin-directory${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
        
    - name: Deploy Packages-Server
      if: steps.generate.outputs.status == 'success'
      run: |
        mkdir -p server/web/snapshots/targets/$TARGET/$SUBTARGET
        cp -r $OPENWRTROOT/bin/packages server/web/snapshots
        cp -r $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/packages server/web/snapshots/targets/$TARGET/$SUBTARGET
        mkdir -p $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/pre-packages-server
        cp -r server $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/pre-packages-server
        cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
        zip -q -r packages-server.zip pre-packages-server/server
        
    - name: Upload Config
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: config.seed
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/config.seed

    - name: Upload Images Sha256sums
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: sha256sums
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/sha256sums
        
    - name: Upload Packages-Server
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: packages-server
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/pre-packages-server
        
    - name: Upload Packages Info
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-generic.manifest
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-generic.manifest
        
    - name: Upload Kernel Packages
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: kernel-packages
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/packages/
        
    - name: Upload RootFS Archive
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-generic-rootfs.tar.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-generic-rootfs.tar.gz

    - name: Upload Generic SquashFS Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-rootfs-squashfs${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-rootfs-squashfs.img.gz

    - name: Upload Generic Ext4 Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-rootfs-ext4${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-rootfs-ext4.img.gz

    - name: Upload Combined DVD Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-combined-squashfs${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-combined-squashfs.img.gz

    - name: Upload Combined DVD Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-combined-ext4${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-combined-ext4.img.gz
        
    - name: Upload Combined PVE/KVM Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-combined-squashfs${{ env.FILE_DATE }}.qcow2
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-combined-squashfs.qcow2
        
    - name: Upload Combined PVE/KVM Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-combined-ext4${{ env.FILE_DATE }}.qcow2
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-combined-ext4.qcow2
        
    - name: Upload Combined VirtualBox Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-combined-squashfs${{ env.FILE_DATE }}.vdi
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-combined-squashfs.vdi
        
    - name: Upload Combined VirtualBox Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-combined-ext4${{ env.FILE_DATE }}.vdi
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-combined-ext4.vdi
        
    - name: Upload Combined VMware Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-combined-squashfs${{ env.FILE_DATE }}.vmdk
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-combined-squashfs.vmdk
        
    - name: Upload Combined VMware Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-combined-ext4${{ env.FILE_DATE }}.vmdk
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-combined-ext4.vmdk
        
    - name: Upload Combined Hyper-V Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-combined-squashfs${{ env.FILE_DATE }}.vhdx
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-combined-squashfs.vhdx
        
    - name: Upload Combined Hyper-V Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-combined-ext4${{ env.FILE_DATE }}.vhdx
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-combined-ext4.vhdx

    - name: Upload GPT DVD Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-uefi-gpt-squashfs${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-uefi-gpt-squashfs.img.gz

    - name: Upload GPT DVD Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-uefi-gpt-ext4${{ env.FILE_DATE }}.img.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-uefi-gpt-ext4.img.gz
        
    - name: Upload GPT PVE/KVM Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-uefi-gpt-squashfs${{ env.FILE_DATE }}.qcow2
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-uefi-gpt-squashfs.qcow2
        
    - name: Upload GPT PVE/KVM Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-uefi-gpt-ext4${{ env.FILE_DATE }}.qcow2
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-uefi-gpt-ext4.qcow2
        
    - name: Upload GPT VirtualBox Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-uefi-gpt-squashfs${{ env.FILE_DATE }}.vdi
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-uefi-gpt-squashfs.vdi
        
    - name: Upload GPT VirtualBox Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-uefi-gpt-ext4${{ env.FILE_DATE }}.vdi
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-uefi-gpt-ext4.vdi
        
    - name: Upload GPT VMware Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-uefi-gpt-squashfs${{ env.FILE_DATE }}.vmdk
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-uefi-gpt-squashfs.vmdk
        
    - name: Upload GPT VMware Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-uefi-gpt-ext4${{ env.FILE_DATE }}.vmdk
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-uefi-gpt-ext4.vmdk
        
    - name: Upload GPT Hyper-V Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-uefi-gpt-squashfs${{ env.FILE_DATE }}.vhdx
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-uefi-gpt-squashfs.vhdx
        
    - name: Upload GPT Hyper-V Ext4 Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success' && env.BUILD_EXT4 == 'true'
      with:
        name: ${{ env.DEVICE }}-uefi-gpt-ext4${{ env.FILE_DATE }}.vhdx
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-uefi-gpt-ext4.vhdx


    - name: Organize Files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/$TARGET/$SUBTARGET
        rm -rf packages pre-packages-server
        echo "::set-output name=status::success"

    - name: Upload Firmware Directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: openwrt-firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        draft: true
        prerelease: true